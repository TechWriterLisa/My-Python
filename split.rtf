{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl780\sa200

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How to use Split in Python\
\pard\pardeftab720

\f1\fs32 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sa200
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 At some point, you may need to break a large string down into smaller chunks, or strings. This is the opposite of concatenation which merges or combines strings into one.\cb1 \
\cb3 To do this, you use the split function. What it does is split or breakup a string and add the data to a string array using a defined separator.\cb1 \
\cb3 If no separator is defined when you call upon the function, whitespace will be used by default. In simpler terms, the separator is a defined character that will be placed between each variable.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl520\sa200

\f0\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Examples of the Split Function In Action\cb1 \
\pard\pardeftab720\sa200

\f1\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Let\'92s take a look at some examples.\cb1 \
\pard\pardeftab720\sl500

\i\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 x = \'91blue,red,green\'92
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 x.split(\'93,\'94)
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\'a0\

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 [\'91blue\'92, \'91red\'92, \'91green\'92]
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 >>>
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\'a0\

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 >>> a,b,c = x.split(\'93,\'94)
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\'a0\

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 >>> a
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'91blue\'92
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\'a0\

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 >>> b
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'a0\

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'91red\'92
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\'a0\

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 >>> c
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'91green\'92
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720

\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \
\pard\pardeftab720\sa200
\cf2 \expnd0\expndtw0\kerning0
\ulnone \outl0\strokewidth0 \uc0\u8232 \cb3 As you can see from this code, the function splits our original string which includes three colors and then stores each variable in a separate string. This leaves us with three strings of \'93a\'94, \'93b\'94, and \'93c\'94. Then, when you ask the interpreter to spit out the variables stored in these strings, you get the appropriate color.\cb1 \
\cb3 Pretty neat, no? It\'92s also extremely useful when you\'92re working extensively with strings and variables.\cb1 \
\cb3 Let\'92s look at another example.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl500

\i\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 >>> words = \'93This is random text we\'92re going to split apart\'94
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\'a0\

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 >>> words2 = words.split(\'93 \'93)
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\'a0\

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 >>> words2
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 [\'91This\'92, \'91is\'92, \'91random\'92, \'91text\'92, \'91we\'92re\'92, \'91going\'92, \'91to\'92, \'91split\'92, \'91apart\'92]
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sa200

\fs32 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \uc0\u8232 \cb3 What we did here is split the larger string and store the variables as a list under the \'93words2\'94 string.\cb1 \
}